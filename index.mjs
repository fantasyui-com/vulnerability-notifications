// Load Modules
import util from 'util';
import  from './code_modules/';
import  from './code_modules/';
import  from './code_modules/';
import  from './code_modules/';
import  from './code_modules/';
import  from './code_modules/';
import  from './code_modules/';
import  from './code_modules/';
import  from './code_modules/';
import  from './code_modules/';
import  from './code_modules/';
import  from './code_modules/';

async function main(context={}){

  try {

    // 1. undefined:undefined
    console.log('\nundefined');
    const Result = await ({context,setup:{meta:{type:"task",name:"Verify Github Access via curl",description:"Use a github access token to pull in notification data.",modules:["request"]},test:[],data:[]},input:{}});
    // console.log(util.inspect(Result),false,2,true)

    // 2. undefined:undefined
    console.log('\nundefined');
    const Result = await ({context,setup:{meta:{type:"task",name:"Verify Github Access via git",description:"Test if the computer is authorized to push to github",modules:["shelljs","path","fs"]},test:[],data:[]},input: Result});
    // console.log(util.inspect(Result),false,2,true)

    // 3. undefined:undefined
    console.log('\nundefined');
    const Result = await ({context,setup:{meta:{type:"task",name:"Get Active Notifications",description:"Get all active github notifications as JSON"},test:[],data:[{meta:{type:"action",name:"Get github notifications",description:"Connect to github using token and get JSON data",modules:["request"]},test:[],data:[]},{meta:{type:"action",name:"Cleanup Notifications",description:"Remove unimportant information from github response"},test:[],data:[]}]},input: Result});
    // console.log(util.inspect(Result),false,2,true)

    // 4. undefined:undefined
    console.log('\nundefined');
    const Result = await ({context,setup:{meta:{type:"task",name:"Select Vulnerable Repositories",description:"Skip unrelated notifications"},test:[],data:[]},input: Result});
    // console.log(util.inspect(Result),false,2,true)

    // 5. undefined:undefined
    console.log('\nundefined');
    const Result = await ({context,setup:{meta:{type:"task",name:"Select Npm Repositories",description:"Select repositories in npm format only",modules:["path","fs"]},test:[],data:[]},input: Result});
    // console.log(util.inspect(Result),false,2,true)

    // 6. undefined:undefined
    console.log('\nundefined');
    const Result = await ({context,setup:{meta:{type:"task",name:"Clone selected repositories via git",description:"all updates are performed on the local system via standard utilities",modules:["shelljs"]},test:[],data:[]},input: Result});
    // console.log(util.inspect(Result),false,2,true)

    // 7. undefined:undefined
    console.log('\nundefined');
    const Result = await ({context,setup:{meta:{type:"task",name:"Run npm update",description:"Update NPM Package using npm-update",modules:["npm","path","fs"]},test:[],data:[]},input: Result});
    // console.log(util.inspect(Result),false,2,true)

    // 8. undefined:undefined
    console.log('\nundefined');
    const Result = await ({context,setup:{meta:{type:"task",name:"Update NPM License",description:"Update license field"},test:[],data:[{meta:{type:"action",name:"Set npm license",description:"Apply new license to the license field in package.json",parameters:"(license='GPLv3', bork: true)",modules:["npm","path","fs"]},test:[{description:"Expect the license field to be GPLv3",assertion:"{key:'license', expect:'GPLv3'}"}],data:[]}]},input: Result});
    // console.log(util.inspect(Result),false,2,true)

    // 9. undefined:undefined
    console.log('\nundefined');
    const Result = await ({context,setup:{meta:{type:"task",name:"Run standard npm update",description:"Ensure all packages are up to date",modules:["npm"]},test:[],data:[]},input: Result});
    // console.log(util.inspect(Result),false,2,true)

    // 10. undefined:undefined
    console.log('\nundefined');
    const Result = await ({context,setup:{meta:{type:"task",name:"Npm Audit and Fix",description:"Perform NPM Audit using npm",modules:["npm"]},test:[],data:[]},input: Result});
    // console.log(util.inspect(Result),false,2,true)

    // 11. undefined:undefined
    console.log('\nundefined');
    const Result = await ({context,setup:{meta:{type:"task",name:"Publish Package Update to npmjs",description:"save data to npm",modules:["npm"]},test:[],data:[]},input: Result});
    // console.log(util.inspect(Result),false,2,true)

    // 12. undefined:undefined
    console.log('\nundefined');
    const finalResult = await ({context,setup:{meta:{type:"task",name:"Publish Code Updates to github",description:"save data to github",modules:["shelljs"]},test:[],data:[]},input: Result});
    // console.log(util.inspect(finalResult),false,2,true)

    // Return Result
    return finalResult;

  } catch(error) {

    console.error(error);

  } // end try/catch

} // end function main ()
main();