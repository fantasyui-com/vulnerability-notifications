/*
 classification: PROGRAM PROCEDURE
           name: Fix Vulnerabilities
    description: Attempt to fix npm-packages.
         author: Fantasy UI - https://github.com/fantasyui-com
*/

// Load Modules
import {inspect} from 'util';
import verifyGithubAccessViaCurl from './code_modules/verify-github-access-via-curl';
import verifyGithubAccessViaGit from './code_modules/verify-github-access-via-git';
import getActiveNotifications from './code_modules/get-active-notifications';
import selectVulnerableRepositories from './code_modules/select-vulnerable-repositories';
import selectNpmRepositories from './code_modules/select-npm-repositories';
import cloneSelectedRepositoriesViaGit from './code_modules/clone-selected-repositories-via-git';
import runNpmUpdate from './code_modules/run-npm-update';
import updateNpmLicense from './code_modules/update-npm-license';
import runStandardNpmUpdate from './code_modules/run-standard-npm-update';
import npmAuditAndFix from './code_modules/npm-audit-and-fix';
import publishPackageUpdateToNpmjs from './code_modules/publish-package-update-to-npmjs';
import publishCodeUpdatesToGithub from './code_modules/publish-code-updates-to-github';

export default async function main(input={}, context={}){

  try {
    const debug = false;

    // Verify Github Access via curl: Use a github access token to pull in notification data.
    // if(debug) console.log('Verify Github Access via curl: Use a github access token to pull in notification data.');
    const verifyGithubAccessViaCurlData = await verifyGithubAccessViaCurl({context, setup:{cache: '3 hours'}, input});
    // if(debug) console.log(inspect(verifyGithubAccessViaCurlData));

    // Verify Github Access via git: Test if the computer is authorized to push to github
    // if(debug) console.log('Verify Github Access via git: Test if the computer is authorized to push to github');
    const verifyGithubAccessViaGitData = await verifyGithubAccessViaGit({context, setup:, input:verifyGithubAccessViaCurlData});
    // if(debug) console.log(inspect(verifyGithubAccessViaGitData));

    // Get Active Notifications: Get all active github notifications as JSON
    // if(debug) console.log('Get Active Notifications: Get all active github notifications as JSON');
    const getActiveNotificationsData = await getActiveNotifications({context, setup:, input:verifyGithubAccessViaGitData});
    // if(debug) console.log(inspect(getActiveNotificationsData));

    // Select Vulnerable Repositories: Skip unrelated notifications
    // if(debug) console.log('Select Vulnerable Repositories: Skip unrelated notifications');
    const selectVulnerableRepositoriesData = await selectVulnerableRepositories({context, setup:, input:getActiveNotificationsData});
    // if(debug) console.log(inspect(selectVulnerableRepositoriesData));

    // Select Npm Repositories: Select repositories in npm format only
    // if(debug) console.log('Select Npm Repositories: Select repositories in npm format only');
    const selectNpmRepositoriesData = await selectNpmRepositories({context, setup:, input:selectVulnerableRepositoriesData});
    // if(debug) console.log(inspect(selectNpmRepositoriesData));

    // Clone selected repositories via git: all updates are performed on the local system via standard utilities
    // if(debug) console.log('Clone selected repositories via git: all updates are performed on the local system via standard utilities');
    const cloneSelectedRepositoriesViaGitData = await cloneSelectedRepositoriesViaGit({context, setup:, input:selectNpmRepositoriesData});
    // if(debug) console.log(inspect(cloneSelectedRepositoriesViaGitData));

    // Run npm update: Update NPM Package using npm-update
    // if(debug) console.log('Run npm update: Update NPM Package using npm-update');
    const runNpmUpdateData = await runNpmUpdate({context, setup:, input:cloneSelectedRepositoriesViaGitData});
    // if(debug) console.log(inspect(runNpmUpdateData));

    // Update NPM License: Update license field
    // if(debug) console.log('Update NPM License: Update license field');
    const updateNpmLicenseData = await updateNpmLicense({context, setup:, input:runNpmUpdateData});
    // if(debug) console.log(inspect(updateNpmLicenseData));

    // Run standard npm update: Ensure all packages are up to date
    // if(debug) console.log('Run standard npm update: Ensure all packages are up to date');
    const runStandardNpmUpdateData = await runStandardNpmUpdate({context, setup:, input:updateNpmLicenseData});
    // if(debug) console.log(inspect(runStandardNpmUpdateData));

    // Npm Audit and Fix: Perform NPM Audit using npm
    // if(debug) console.log('Npm Audit and Fix: Perform NPM Audit using npm');
    const npmAuditAndFixData = await npmAuditAndFix({context, setup:, input:runStandardNpmUpdateData});
    // if(debug) console.log(inspect(npmAuditAndFixData));

    // Publish Package Update to npmjs: save data to npm
    // if(debug) console.log('Publish Package Update to npmjs: save data to npm');
    const publishPackageUpdateToNpmjsData = await publishPackageUpdateToNpmjs({context, setup:, input:npmAuditAndFixData});
    // if(debug) console.log(inspect(publishPackageUpdateToNpmjsData));

    // Publish Code Updates to github: save data to github
    // if(debug) console.log('Publish Code Updates to github: save data to github');
    const finalResult = await publishCodeUpdatesToGithub({context, setup:, input:publishPackageUpdateToNpmjsData});
    // if(debug) console.log(inspect(finalResult));

    // Return Result
    return finalResult;

  } catch(error) {

    console.error(error);

  } // end try/catch

} // end function main ()
